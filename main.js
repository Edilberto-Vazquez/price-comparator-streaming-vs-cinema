(()=>{"use strict";var e={245:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});class n extends HTMLFormElement{constructor(){super()}getStyles(){return"\n      <style>\n        .movies-form {\n          width: 300px;\n          height: 110px;\n          display: grid;\n          row-gap: 5px;\n        }\n        .movies-form__label {\n          width: 100%;\n          height: 50px;\n          border-radius: 10px;\n        }\n        .movies-form__input {\n          width: 100%;\n          height: 50px;\n          display: grid;\n          padding-left: 20px;\n          border: none;\n          border-radius: 5px;\n          font-size: 1.6rem;\n          background: rgb(49, 52, 62);\n          color: white;\n          caret-color: white;\n        }\n        .movies-form__input:focus-visible {\n          outline: none;\n          border: 1px solid rgb(168, 169, 173);\n        }\n        .movies-form__input::placeholder {\n          color: rgb(168, 169, 173);\n        }\n      </style>\n    "}getTemplate(){const e=document.createElement("template");return e.innerHTML=`\n        <label class="movies-form__label" for="numMovies">\n          <input class="movies-form__input" type="number" name="numMovies" id="numMovies" placeholder="Películas que ves al mes">\n        </label>\n        <label class="movies-form__label" for="moviePrice">\n          <input class="movies-form__input" type="number" name="moviePrice" id="moviePrice" placeholder="Precio de la película">\n        </label>\n      ${this.getStyles()}\n    `,e}render(){this.className="movies-form",this.append(this.getTemplate().content.cloneNode(!0))}connectedCallback(){this.render()}}customElements.define("movies-form",n,{extends:"form"}),t.default=n},543:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});class n extends HTMLElement{constructor(e,t,n,r){super(),this.attachShadow({mode:"open"}),this._name=e,this._image=t,this._display=n,this.handleClick=r.bind(this),this._observer=new MutationObserver((e=>this.onDomChanged))}get name(){return this._name}set name(e){this._name=e}get image(){return this._image}set image(e){this._image=e}get display(){return this._display}set display(e){this._display=e}getStyles(){return"\n      <style>\n        :host {\n          width: 75px;\n          height: 75px;\n          display: grid;\n        }\n        .img-wrapper{\n          width: 75px;\n          height: 75px;\n        }\n        .img-wrapper__img{\n          width: 100%;\n          height: auto;\n        }\n      </style>\n    "}getTemplete(){const e=document.createElement("template");return e.innerHTML=`\n      <div class="img-wrapper">\n        <img class="img-wrapper__img" src=${this.image} alt=${this.name}>\n      </div>\n      ${this.getStyles()}\n    `,e}render(){this.addEventListener("click",this.handleClick),this.shadowRoot?.append(this.getTemplete().content.cloneNode(!0))}onDomChanged(e){}connectedCallback(){this.render()}static get observedAttributes(){return["name","image","display"]}attributeChangedCallback(e,t,n){"name"===e&&(this.name=n),"image"===e&&(this.image=n),"display"===e&&(this.display=n)}disconnectedCallback(){this._observer.disconnect,this.removeEventListener("click",this.handleClick)}}customElements.define("streaming-platform-button",n),t.default=n},576:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});class n extends HTMLElement{constructor(e){super(),this.attachShadow({mode:"open"}),this._properties=e,this._observer=new MutationObserver((e=>this.onDomChanged(e)))}get properties(){return this._properties}set properties(e){this._properties=e}getSyles(){return"\n      <style>\n        * {\n          box-sizing: border-box;\n          margin: 0;\n          padding: 0;\n        }\n        :host {\n          width: 100%;\n          max-width: 450px;\n          height: 380px;\n          display: grid;\n          animation: fade 0.4s linear;\n        }\n        .streaming-platform-card {\n          width: 100%;\n          height: 100%;\n          padding: 24px 24px;\n          display: grid;\n          grid-auto-rows: min-content;\n          place-items: center;\n          gap: 14px;\n          border-radius: 10px;\n          background: #040714;\n        }\n        .streaming-platform-card__image {\n          width: 100%;\n          height: 100px;\n        }\n        .streaming-platform-card__description {\n          display: grid;\n          row-gap: 14px;\n          font-size: 1.8rem;\n          color: white;\n        }\n        @keyframes fade {\n          from {\n            opacity: 0;\n            transform: translateX(-10px);\n          }\n          to {\n            opacity: 1;\n            transform: translateX(0)\n          }\n        }\n      <style>\n    "}getTemplate(){const e=document.createElement("template");return e.innerHTML=`\n      <article class="streaming-platform-card">\n        <img src=${this.properties.img} alt="streaming platform" class="streaming-platform-card__image" />\n        <div class="streaming-platform-card__description">\n        <span>Costo mensual del cine: ${this.formatPrice(this.properties.cinemaprice)} </span>\n          ${this.priceComparator(this.properties.plans)}\n        </div>\n        </span>\n      </article>\n      ${this.getSyles()}\n    `,e}priceComparator(e){return e.map((e=>{const t=12*this.properties.cinemaprice;return"Anual"===e.plan?`<span>Plan ${e.plan}: ${this.formatPrice(e.price)} ${this.saveMoney(e.price,t)}</span>`:"Anual"!==e.plan?`<span>Plan ${e.plan}: ${this.formatPrice(e.price)} ${this.saveMoney(e.price,this.properties.cinemaprice)}</span>`:void 0})).join("")}saveMoney(e,t){return e<t?`ahorras: ${this.formatPrice(Math.abs(e-t))}`:`pierdes: ${this.formatPrice(Math.abs(e-t))}`}formatPrice(e){return new window.Intl.NumberFormat("en-EN",{style:"currency",currency:"MXN"}).format(e)}render(){this.setAttribute("id",this.properties.id),this.shadowRoot?.appendChild(this.getTemplate().content.cloneNode(!0))}onDomChanged(e){}connectedCallback(){for(this._observer.observe(this,{attributes:!0,characterData:!0,subtree:!0,childList:!0});this.shadowRoot?.firstChild;)this.shadowRoot?.removeChild(this.shadowRoot?.firstChild);this.render()}static get observedAttributes(){return["properties"]}attributeChangedCallback(e,t,n){"properties"===e&&(this.properties=n)}disconnectedCallback(){this._observer.disconnect()}}customElements.define("streaming-platform-card",n),t.default=n},820:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const i=r(n(595));window.addEventListener("load",i.default),window.addEventListener("hashchange",i.default)},595:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const i=r(n(245)),s=r(n(543)),a=r(n(576)),o=r(n(819));t.default=()=>{let e=o.default,t={numMovies:0,moviePrice:0};const n=n=>{n.target.display=!n.target.display;const r=e.find((e=>e.id===n.target.name)),i=document.querySelector(".streaming-platforms-cards"),s=t.numMovies*t.moviePrice;n.target.display?i?.append(new a.default({...r,cinemaprice:s})):i?.removeChild(document.querySelector(`#${n.target.name}`))},r=document.getElementById("app"),l=new i.default,p=e.map((e=>new s.default(e.id,e.icon,!1,n))),c=document.createElement("div");c.className="streaming-platforms-buttons",c.append(...p);const d=document.createElement("div");d.className="streaming-platforms-cards",r?.addEventListener("input",(e=>{if("movies-form__input"===e.target.className&&(t={...t,[e.target.name]:e.target.value}),document.querySelectorAll(".streaming-platforms-cards").length>0){let e=[...document.querySelectorAll("streaming-platform-card")];const n=t.numMovies*t.moviePrice;e=e.map((e=>(e.properties.cinemaprice=n,e))),document.querySelector(".streaming-platforms-cards").innerHTML="",document.querySelector(".streaming-platforms-cards")?.append(...e)}})),r?.append(l,c,d)}},819:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const i=r(n(911)),s=r(n(880)),a=r(n(345)),o=r(n(662)),l=r(n(67)),p=r(n(42)),c=[{id:"amazon",img:o.default,icon:i.default,plans:[{plan:"Mensual",price:75},{plan:"Anual",price:899}]},{id:"netflix",img:l.default,icon:s.default,plans:[{plan:"Básico",price:139},{plan:"Estándar",price:196},{plan:"Premium",price:266}]},{id:"disney",img:p.default,icon:a.default,plans:[{plan:"Mensual",price:159},{plan:"Anual",price:1599}]}];t.default=c},911:(e,t,n)=>{e.exports=n.p+"assets/0cb82d2772011cc6edf3.svg"},880:(e,t,n)=>{e.exports=n.p+"assets/3f8708a6bdaf7064c9e5.svg"},345:(e,t,n)=>{e.exports=n.p+"assets/106902c99265ceaf2b94.svg"},662:(e,t,n)=>{e.exports=n.p+"assets/839d08c3936894ad7c81.svg"},42:(e,t,n)=>{e.exports=n.p+"assets/8205aae82a3c67ca943e.svg"},67:(e,t,n)=>{e.exports=n.p+"assets/5787551b8de42aef368c.svg"}},t={};function n(r){var i=t[r];if(void 0!==i)return i.exports;var s=t[r]={exports:{}};return e[r].call(s.exports,s,s.exports,n),s.exports}n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");r.length&&(e=r[r.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),n(820)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,