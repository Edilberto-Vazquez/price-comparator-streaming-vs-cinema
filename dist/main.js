(()=>{"use strict";var e={245:()=>{class e extends HTMLFormElement{constructor(e,t){super(),this._observer=new MutationObserver((e=>this.onDomChanged(e))),this._values=e,this.handleChange=t.bind(this)}get values(){return this._values}set values(e){this._values=e}getStyles(){return"\n      <style>\n      .movies-form {\n      }\n      </style>\n    "}getTemplate(){const e=document.createElement("template");return e.innerHTML=`\n        <label for="nummovies">\n          Películas que ves al mes\n          <input type="number" name="nummovies" id="nummovies">\n        </label>\n        <label for="movieprice">\n          Precio de la película\n          <input type="number" name="movieprice" id="movieprice">\n        </label>\n      ${this.getStyles()}\n    `,e}render(){this.classList.add("movies-form"),this.appendChild(this.getTemplate().content.cloneNode(!0)),document.getElementById("nummovies")?.addEventListener("change",this.handleChange),document.getElementById("movieprice")?.addEventListener("change",this.handleChange)}onDomChanged(e){}connectedCallback(){this._observer.observe(this,{attributes:!0,characterData:!0,subtree:!0,childList:!0}),this.render()}static get observedAttributes(){return["values"]}attributeChangedCallback(e,t,n){"values"===e&&(this.values=n)}disconnectedCallback(){this._observer.disconnect(),document.getElementById("nummovies")?.removeEventListener("change",this.handleChange(Event)),document.getElementById("movieprice")?.removeEventListener("change",this.handleChange(Event))}}customElements.define("movies-form",e,{extends:"form"})},820:function(e,t,n){var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),n(245);const r=s(n(662)),i=s(n(67)),a=s(n(42)),o=async()=>{r.default,i.default,a.default,document.getElementById("main").innerHTML="\n    <movies-form></movies-form>\n  "};window.addEventListener("load",o),window.addEventListener("hashchange",o)},662:(e,t,n)=>{e.exports=n.p+"assets/839d08c3936894ad7c81.svg"},42:(e,t,n)=>{e.exports=n.p+"assets/8205aae82a3c67ca943e.svg"},67:(e,t,n)=>{e.exports=n.p+"assets/5787551b8de42aef368c.svg"}},t={};function n(s){var r=t[s];if(void 0!==r)return r.exports;var i=t[s]={exports:{}};return e[s].call(i.exports,i,i.exports,n),i.exports}n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var s=t.getElementsByTagName("script");s.length&&(e=s[s.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),n(820)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,